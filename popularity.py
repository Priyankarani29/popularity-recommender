# -*- coding: utf-8 -*-
"""popularity.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wG2e5HeGdd-TSz5E2EReH_pA0FBfgFUK
"""

# --------------------------------------
# üéµ Spotify AI Recommender - Streamlit App
# Only Logistic Regression & Random Forest + Cosine Similarity + Mixed Mood Fix
# --------------------------------------

# üì¶ Imports
import streamlit as st
import pandas as pd
import numpy as np
import json
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, accuracy_score, f1_score, roc_auc_score, roc_curve
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.metrics.pairwise import cosine_similarity
import matplotlib.pyplot as plt
import seaborn as sns

# üí† Streamlit Config
st.set_page_config(page_title="üéµ Spotify AI Recommender", layout="wide")

# --------------------------------------
# üóïÔ∏è Load Data
# --------------------------------------
@st.cache_data(show_spinner=True)
def load_data():
    df = pd.read_csv("spotify_tracks.csv", low_memory=False)
    df = df.drop_duplicates(subset=['track_name', 'track_genre'], keep='first')
    audio_cols = ['danceability', 'energy', 'loudness', 'speechiness', 'acousticness',
                  'instrumentalness', 'liveness', 'tempo', 'duration_ms', 'valence']
    df[audio_cols] = df[audio_cols].fillna(df[audio_cols].mean()).astype(np.float32)
    return df, audio_cols

spotify_df, model_features = load_data()
X_valence = spotify_df[model_features[:-1]]
y_valence = (spotify_df['valence'] > 0.5).astype(int)
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X_valence)
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y_valence, test_size=0.2, random_state=42)

# --------------------------------------
# üîç Sidebar Navigation
# --------------------------------------
st.sidebar.title("Navigation")
page = st.sidebar.radio("Go to", ["EDA Dashboard", "Model Evaluation", "ML-Based Recommendation", "üîÅ Cosine Similarity Recommendation"])

# --------------------------------------
# üìä EDA Dashboard
# --------------------------------------
if page == "EDA Dashboard":
    st.title("üìä Spotify Dataset - EDA Dashboard")
    st.write(f"**Total Records:** {spotify_df.shape[0]:,}")
    st.dataframe(spotify_df[model_features].describe(), use_container_width=True)

    st.subheader("üå∑ Genre Distribution (Top 20)")
    st.bar_chart(spotify_df['track_genre'].value_counts().head(20))

    st.subheader("üìà Correlation Heatmap")
    fig, ax = plt.subplots(figsize=(10, 6))
    sns.heatmap(spotify_df[model_features].corr(), annot=False, cmap='coolwarm', ax=ax)
    st.pyplot(fig)

    st.subheader("üîç Feature Histogram")
    feature = st.selectbox("Choose Feature", model_features)
    fig2, ax2 = plt.subplots()
    sns.histplot(spotify_df[feature], kde=True, ax=ax2, bins=30)
    st.pyplot(fig2)

# --------------------------------------
# üß† Model Evaluation
# --------------------------------------
elif page == "Model Evaluation":
    st.title("üß† Model Evaluation - Predicting Valence")
    models = {
        "Logistic Regression": LogisticRegression(max_iter=1000),
        "Random Forest": RandomForestClassifier(n_estimators=200)
    }

    results = []
    fig, ax = plt.subplots(figsize=(8, 6))
    best_auc = 0
    best_model = None
    selected_model_name = ""

    for name, model in models.items():
        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)
        y_prob = model.predict_proba(X_test)[:, 1]

        acc = accuracy_score(y_test, y_pred)
        f1 = f1_score(y_test, y_pred)
        auc = roc_auc_score(y_test, y_prob)
        results.append({"Model": name, "Accuracy": acc, "F1 Score": f1, "ROC AUC": auc})

        st.markdown(f"### üìå {name} Performance")
        st.text(classification_report(y_test, y_pred))
        st.markdown(f"**Accuracy:** `{acc:.4f}` | **F1 Score:** `{f1:.4f}` | **ROC AUC:** `{auc:.4f}`")

        if auc > best_auc:
            best_auc = auc
            best_model = model
            selected_model_name = name

        fpr, tpr, _ = roc_curve(y_test, y_prob)
        ax.plot(fpr, tpr, label=f"{name} (AUC = {auc:.2f})")

    ax.plot([0, 1], [0, 1], linestyle='--', color='gray')
    ax.set_xlabel("False Positive Rate")
    ax.set_ylabel("True Positive Rate")
    ax.set_title("ROC Curve Comparison")
    ax.legend()
    st.pyplot(fig)

    results_df = pd.DataFrame(results).sort_values("ROC AUC", ascending=False)
    st.subheader("üìä Model Performance Summary")
    st.dataframe(results_df.style.format({"Accuracy": "{:.4f}", "F1 Score": "{:.4f}", "ROC AUC": "{:.4f}"}))

    st.success(f"‚úÖ Best model selected for prediction: `{selected_model_name}`")
    st.session_state.best_model = best_model
    st.session_state.selected_model_name = selected_model_name

# --------------------------------------
# üéµ ML-Based Recommendation
# --------------------------------------
elif page == "ML-Based Recommendation":
    st.title("üéµ ML-Based Mood Song Recommender")

    if "best_model" not in st.session_state:
        st.warning("Please evaluate models first from the 'Model Evaluation' tab.")
    else:
        valence_model = st.session_state.best_model
        valence_model.fit(X_scaled, y_valence)
        spotify_df['predicted_valence'] = valence_model.predict(X_scaled)

        st.markdown(f"**Using Model:** `{st.session_state.selected_model_name}`")

        uploaded_file = st.file_uploader("Upload a playlist JSON file for personalized recommendations", type="json")
        if uploaded_file:
            try:
                user_data = json.load(uploaded_file)
                user_df = pd.DataFrame(user_data)
                user_df = user_df.dropna(subset=model_features[:-1])
                user_scaled = scaler.transform(user_df[model_features[:-1]])
                user_df['predicted_valence'] = valence_model.predict(user_scaled)

                happy_df = user_df[user_df['predicted_valence'] == 1]
                calm_df = user_df[user_df['predicted_valence'] == 0]

                st.info(f"üéµ Your playlist contains: {len(happy_df)} Happy and {len(calm_df)} Calm songs")

                if len(happy_df) > 0:
                    happy_recs = spotify_df[spotify_df['predicted_valence'] == 1].sample(min(10, len(happy_df) * 2))
                    st.subheader("üòä Recommended Songs for Happy Tracks")
                    st.dataframe(happy_recs[['track_name', 'track_genre', 'energy', 'valence']], use_container_width=True)

                if len(calm_df) > 0:
                    calm_recs = spotify_df[spotify_df['predicted_valence'] == 0].sample(min(10, len(calm_df) * 2))
                    st.subheader("üßò Recommended Songs for Calm Tracks")
                    st.dataframe(calm_recs[['track_name', 'track_genre', 'energy', 'valence']], use_container_width=True)

                if len(happy_df) == 0 and len(calm_df) == 0:
                    st.warning("No valid songs detected in uploaded playlist.")

            except Exception as e:
                st.error(f"‚ùå Error processing uploaded file: {e}")

# --------------------------------------
# üîÅ Cosine Similarity Recommendation
# --------------------------------------
elif page == "üîÅ Cosine Similarity Recommendation":
    st.title("üîÅ Content-Based Song Recommender (Cosine Similarity)")

    audio_features = model_features[:-1]
    spotify_clean = spotify_df.dropna(subset=audio_features)

    if "scaled_dataset" not in st.session_state:
        st.session_state.scaled_dataset = scaler.fit_transform(spotify_clean[audio_features])

    scaled_dataset = st.session_state.scaled_dataset

    method = st.radio("Choose a method", ["Select a song", "Upload a playlist"])

    if method == "Select a song":
        track_names = spotify_clean['track_name'].unique()
        selected_track = st.selectbox("Choose a song", track_names)

        selected_idx = spotify_clean[spotify_clean['track_name'] == selected_track].index[0]
        selected_vector = scaled_dataset[spotify_clean.index.get_loc(selected_idx)].reshape(1, -1)

        cosine_scores = cosine_similarity(selected_vector, scaled_dataset)[0]
        top_n = st.slider("Number of recommendations", 5, 50, 10)
        top_indices = cosine_scores.argsort()[::-1][1:top_n+1]

        recommended = spotify_clean.iloc[top_indices][['track_name', 'track_genre', 'energy', 'valence']]
        st.subheader("üéß Top Similar Songs")
        st.dataframe(recommended, use_container_width=True)

    elif method == "Upload a playlist":
        uploaded_file = st.file_uploader("Upload your playlist (JSON format)", type="json")
        if uploaded_file:
            try:
                user_data = json.load(uploaded_file)
                user_df = pd.DataFrame(user_data).dropna(subset=audio_features)
                user_scaled = scaler.transform(user_df[audio_features])

                sim_scores = cosine_similarity(user_scaled, scaled_dataset)
                avg_scores = sim_scores.mean(axis=0)

                top_n = st.slider("Number of recommendations", 5, 50, 10)
                top_indices = avg_scores.argsort()[::-1][:top_n]
                recommended = spotify_clean.iloc[top_indices][['track_name', 'track_genre', 'energy', 'valence']]

                st.subheader("üéß Top Similar Songs (Playlist-Based)")
                st.dataframe(recommended, use_container_width=True)

            except Exception as e:
                st.error(f"Failed to process playlist: {e}")
